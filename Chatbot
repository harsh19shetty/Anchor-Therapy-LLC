{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import unicodedata\n",
    "import re\n",
    "import pandas as pd\n",
    "import tensorflow.keras \n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Embedding\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from sklearn.utils import shuffle "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "conv = pd.read_csv(\"C:/Users/dell/Desktop/Practicum/Chatbot.csv\",encoding= 'unicode_escape')\n",
    "conv.head()\n",
    "conv=shuffle(conv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "conv['Questions'] = conv['Questions'].astype(str)\n",
    "conv['Answers'] = conv['Answers'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clean up text\n",
    "\n",
    "def unicode_to_ascii(s):\n",
    "    return ''.join(\n",
    "        c for c in unicodedata.normalize('NFD', s)\n",
    "        if unicodedata.category(c) != 'Mn'\n",
    "    )\n",
    "\n",
    "def normalize_string(s):\n",
    "    s = unicode_to_ascii(s)\n",
    "    s = re.sub(r'([!.?])', r' \\1', s)\n",
    "    s = re.sub(r'[^a-zA-Z.!?]+', r' ', s)\n",
    "    s = re.sub(r'\\s+', r' ', s)\n",
    "    return s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clean up text\n",
    "raw_data_en = [normalize_string(data) for data in conv[\"Questions\"]]\n",
    "\n",
    "# add special token <start>/<end> to indicate the beginning and end of a sentence\n",
    "raw_data_fr_in = ['<start> ' + normalize_string(data) for data in conv[\"Answers\"]]\n",
    "raw_data_fr_out = [normalize_string(data) + ' <end>' for data in conv[\"Answers\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of English words:  686\n"
     ]
    }
   ],
   "source": [
    "# Tokenize each sentence and index each word\n",
    "max_en_words = 5000\n",
    "max_en_len = 10\n",
    "en_tokenizer = tensorflow.keras.preprocessing.text.Tokenizer(filters='', \\\n",
    "                                                  num_words=max_en_words )\n",
    "en_tokenizer.fit_on_texts(raw_data_en)\n",
    "en_tokenizer.fit_on_texts(raw_data_fr_in)\n",
    "en_tokenizer.fit_on_texts(raw_data_fr_out)\n",
    "\n",
    "print(\"Total number of English words: \", len(en_tokenizer.word_index))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_q = en_tokenizer.texts_to_sequences(raw_data_en)\n",
    "data_q = tensorflow.keras.preprocessing.sequence.pad_sequences(data_q,\\\n",
    "                                                     maxlen=max_en_len, \\\n",
    "                                                     padding='post')\n",
    "\n",
    "data_a_in = en_tokenizer.texts_to_sequences(raw_data_fr_in)\n",
    "data_a_in = tensorflow.keras.preprocessing.sequence.pad_sequences(data_a_in,\\\n",
    "                                                     maxlen=max_en_len, \\\n",
    "                                                     padding='post')\n",
    "\n",
    "data_a_out = en_tokenizer.texts_to_sequences(raw_data_fr_out)\n",
    "data_a_out = tensorflow.keras.preprocessing.sequence.pad_sequences(data_a_out,\\\n",
    "                                                     maxlen=max_en_len, \\\n",
    "                                                     padding='post')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(51, 10, 5000)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert each word index using one-hot coding\n",
    "# This variable is the target of training\n",
    "\n",
    "data_a_out_cat = to_categorical(data_a_out, num_classes=max_en_words)\n",
    "data_a_out_cat.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "latent_dim = 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define an input sequence and process it.\n",
    "encoder_inputs = Input(shape=(max_en_len,))\n",
    "\n",
    "embed = Embedding(max_en_words, latent_dim, mask_zero = True, input_length=max_en_len)\n",
    "encoder_embed = embed(encoder_inputs)\n",
    "\n",
    "encoder_lstm = LSTM(latent_dim,return_state=True,\\\n",
    "                   dropout=0.2, recurrent_dropout=0.2)\n",
    "encoder_outputs, state_h, state_c = encoder_lstm(encoder_embed)\n",
    "encoder_states = [state_h, state_c]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up the decoder, using `encoder_states` as initial state.\n",
    "# the shape of decoder_inputs is set to None so it can translate \n",
    "# with a single word input, not necessary a sentence input\n",
    "decoder_inputs = Input(shape=(None,))\n",
    "\n",
    "decoder_embed = embed(decoder_inputs)\n",
    "\n",
    "decoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True,\\\n",
    "                   dropout=0.2, recurrent_dropout=0.2)\n",
    "decoder_outputs, _, _ = decoder_lstm(decoder_embed, initial_state=encoder_states)\n",
    "decoder_dense = Dense(max_en_words, activation='softmax')\n",
    "decoder_outputs = decoder_dense(decoder_outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"functional_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input_2 (InputLayer)            [(None, None)]       0                                            \n",
      "__________________________________________________________________________________________________\n",
      "input_1 (InputLayer)            [(None, 10)]         0                                            \n",
      "__________________________________________________________________________________________________\n",
      "embedding (Embedding)           multiple             500000      input_1[0][0]                    \n",
      "                                                                 input_2[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "lstm (LSTM)                     [(None, 100), (None, 80400       embedding[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "lstm_1 (LSTM)                   [(None, None, 100),  80400       embedding[1][0]                  \n",
      "                                                                 lstm[0][1]                       \n",
      "                                                                 lstm[0][2]                       \n",
      "__________________________________________________________________________________________________\n",
      "dense (Dense)                   (None, None, 5000)   505000      lstm_1[0][0]                     \n",
      "==================================================================================================\n",
      "Total params: 1,165,800\n",
      "Trainable params: 1,165,800\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Define the model that will turn\n",
    "# `encoder_input_data` & `decoder_input_data` into `decoder_target_data`\n",
    "model = Model([encoder_inputs, decoder_inputs], decoder_outputs)\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "8/8 - 2s - loss: 8.1057 - categorical_accuracy: 0.0992 - val_loss: 7.9944 - val_categorical_accuracy: 0.1000\n",
      "Epoch 2/50\n",
      "8/8 - 1s - loss: 6.4610 - categorical_accuracy: 0.1044 - val_loss: 6.5702 - val_categorical_accuracy: 0.1000\n",
      "Epoch 3/50\n",
      "8/8 - 1s - loss: 5.1198 - categorical_accuracy: 0.1044 - val_loss: 6.5169 - val_categorical_accuracy: 0.1000\n",
      "Epoch 4/50\n",
      "8/8 - 1s - loss: 4.7719 - categorical_accuracy: 0.1044 - val_loss: 6.6000 - val_categorical_accuracy: 0.0818\n",
      "Epoch 5/50\n",
      "8/8 - 1s - loss: 4.6054 - categorical_accuracy: 0.1070 - val_loss: 6.7044 - val_categorical_accuracy: 0.0818\n",
      "Epoch 6/50\n",
      "8/8 - 1s - loss: 4.5083 - categorical_accuracy: 0.1018 - val_loss: 6.8024 - val_categorical_accuracy: 0.0818\n",
      "Epoch 7/50\n",
      "8/8 - 1s - loss: 4.4385 - categorical_accuracy: 0.1149 - val_loss: 6.9098 - val_categorical_accuracy: 0.0818\n",
      "Epoch 8/50\n",
      "8/8 - 1s - loss: 4.3889 - categorical_accuracy: 0.1097 - val_loss: 7.0325 - val_categorical_accuracy: 0.1000\n",
      "Epoch 9/50\n",
      "8/8 - 1s - loss: 4.3516 - categorical_accuracy: 0.1201 - val_loss: 7.1135 - val_categorical_accuracy: 0.1000\n",
      "Epoch 10/50\n",
      "8/8 - 1s - loss: 4.3074 - categorical_accuracy: 0.1175 - val_loss: 7.2075 - val_categorical_accuracy: 0.1182\n",
      "Epoch 11/50\n",
      "8/8 - 1s - loss: 4.2714 - categorical_accuracy: 0.1201 - val_loss: 7.2607 - val_categorical_accuracy: 0.1273\n",
      "Epoch 12/50\n",
      "8/8 - 1s - loss: 4.2393 - categorical_accuracy: 0.1227 - val_loss: 7.3398 - val_categorical_accuracy: 0.1273\n",
      "Epoch 13/50\n",
      "8/8 - 1s - loss: 4.2069 - categorical_accuracy: 0.1332 - val_loss: 7.4367 - val_categorical_accuracy: 0.1091\n",
      "Epoch 14/50\n",
      "8/8 - 1s - loss: 4.1811 - categorical_accuracy: 0.1253 - val_loss: 7.4480 - val_categorical_accuracy: 0.1455\n",
      "Epoch 15/50\n",
      "8/8 - 1s - loss: 4.1424 - categorical_accuracy: 0.1462 - val_loss: 7.5541 - val_categorical_accuracy: 0.1091\n",
      "Epoch 16/50\n",
      "8/8 - 1s - loss: 4.3969 - categorical_accuracy: 0.1279 - val_loss: 7.5432 - val_categorical_accuracy: 0.1182\n",
      "Epoch 17/50\n",
      "8/8 - 1s - loss: 4.0895 - categorical_accuracy: 0.1332 - val_loss: 7.4584 - val_categorical_accuracy: 0.1455\n",
      "Epoch 18/50\n",
      "8/8 - 1s - loss: 4.0569 - categorical_accuracy: 0.1384 - val_loss: 7.3949 - val_categorical_accuracy: 0.1636\n",
      "Epoch 19/50\n",
      "8/8 - 1s - loss: 4.0210 - categorical_accuracy: 0.1540 - val_loss: 7.4758 - val_categorical_accuracy: 0.1273\n",
      "Epoch 20/50\n",
      "8/8 - 1s - loss: 3.9974 - categorical_accuracy: 0.1540 - val_loss: 7.4041 - val_categorical_accuracy: 0.1727\n",
      "Epoch 21/50\n",
      "8/8 - 1s - loss: 3.9607 - categorical_accuracy: 0.1540 - val_loss: 7.5094 - val_categorical_accuracy: 0.1636\n",
      "Epoch 22/50\n",
      "8/8 - 1s - loss: 3.9363 - categorical_accuracy: 0.1540 - val_loss: 7.4837 - val_categorical_accuracy: 0.1727\n",
      "Epoch 23/50\n",
      "8/8 - 1s - loss: 3.9078 - categorical_accuracy: 0.1619 - val_loss: 7.5310 - val_categorical_accuracy: 0.1727\n",
      "Epoch 24/50\n",
      "8/8 - 1s - loss: 3.8887 - categorical_accuracy: 0.1488 - val_loss: 7.4616 - val_categorical_accuracy: 0.1909\n",
      "Epoch 25/50\n",
      "8/8 - 1s - loss: 3.8579 - categorical_accuracy: 0.1775 - val_loss: 7.5867 - val_categorical_accuracy: 0.1818\n",
      "Epoch 26/50\n",
      "8/8 - 1s - loss: 3.8284 - categorical_accuracy: 0.1723 - val_loss: 7.6228 - val_categorical_accuracy: 0.1818\n",
      "Epoch 27/50\n",
      "8/8 - 1s - loss: 3.8042 - categorical_accuracy: 0.1828 - val_loss: 7.7403 - val_categorical_accuracy: 0.1818\n",
      "Epoch 28/50\n",
      "8/8 - 1s - loss: 3.7826 - categorical_accuracy: 0.1854 - val_loss: 7.6600 - val_categorical_accuracy: 0.1909\n",
      "Epoch 29/50\n",
      "8/8 - 1s - loss: 3.7539 - categorical_accuracy: 0.1880 - val_loss: 7.7827 - val_categorical_accuracy: 0.1909\n",
      "Epoch 30/50\n",
      "8/8 - 1s - loss: 3.7307 - categorical_accuracy: 0.2089 - val_loss: 7.7463 - val_categorical_accuracy: 0.1818\n",
      "Epoch 31/50\n",
      "8/8 - 1s - loss: 3.6997 - categorical_accuracy: 0.2089 - val_loss: 7.8384 - val_categorical_accuracy: 0.1818\n",
      "Epoch 32/50\n",
      "8/8 - 1s - loss: 3.6773 - categorical_accuracy: 0.2063 - val_loss: 7.8298 - val_categorical_accuracy: 0.1909\n",
      "Epoch 33/50\n",
      "8/8 - 1s - loss: 3.6475 - categorical_accuracy: 0.2245 - val_loss: 7.8422 - val_categorical_accuracy: 0.1818\n",
      "Epoch 34/50\n",
      "8/8 - 1s - loss: 3.6231 - categorical_accuracy: 0.2219 - val_loss: 7.8914 - val_categorical_accuracy: 0.1909\n",
      "Epoch 35/50\n",
      "8/8 - 1s - loss: 3.5894 - categorical_accuracy: 0.2219 - val_loss: 7.9166 - val_categorical_accuracy: 0.1818\n",
      "Epoch 36/50\n",
      "8/8 - 1s - loss: 3.5598 - categorical_accuracy: 0.2167 - val_loss: 7.9614 - val_categorical_accuracy: 0.1909\n",
      "Epoch 37/50\n",
      "8/8 - 1s - loss: 3.5315 - categorical_accuracy: 0.2193 - val_loss: 7.9965 - val_categorical_accuracy: 0.1909\n",
      "Epoch 38/50\n",
      "8/8 - 1s - loss: 3.5081 - categorical_accuracy: 0.2298 - val_loss: 7.9739 - val_categorical_accuracy: 0.1909\n",
      "Epoch 39/50\n",
      "8/8 - 1s - loss: 3.4780 - categorical_accuracy: 0.2219 - val_loss: 7.9975 - val_categorical_accuracy: 0.1909\n",
      "Epoch 40/50\n",
      "8/8 - 1s - loss: 3.4506 - categorical_accuracy: 0.2245 - val_loss: 8.0127 - val_categorical_accuracy: 0.1818\n",
      "Epoch 41/50\n",
      "8/8 - 1s - loss: 3.4232 - categorical_accuracy: 0.2272 - val_loss: 8.0029 - val_categorical_accuracy: 0.1818\n",
      "Epoch 42/50\n",
      "8/8 - 1s - loss: 3.3996 - categorical_accuracy: 0.2272 - val_loss: 8.0252 - val_categorical_accuracy: 0.1909\n",
      "Epoch 43/50\n",
      "8/8 - 1s - loss: 3.3689 - categorical_accuracy: 0.2298 - val_loss: 8.0520 - val_categorical_accuracy: 0.2000\n",
      "Epoch 44/50\n",
      "8/8 - 1s - loss: 3.3428 - categorical_accuracy: 0.2272 - val_loss: 8.0615 - val_categorical_accuracy: 0.1909\n",
      "Epoch 45/50\n",
      "8/8 - 1s - loss: 3.3141 - categorical_accuracy: 0.2324 - val_loss: 8.0571 - val_categorical_accuracy: 0.1818\n",
      "Epoch 46/50\n",
      "8/8 - 1s - loss: 3.2960 - categorical_accuracy: 0.2272 - val_loss: 8.0720 - val_categorical_accuracy: 0.1818\n",
      "Epoch 47/50\n",
      "8/8 - 1s - loss: 3.2555 - categorical_accuracy: 0.2324 - val_loss: 8.1111 - val_categorical_accuracy: 0.1818\n",
      "Epoch 48/50\n",
      "8/8 - 1s - loss: 3.2407 - categorical_accuracy: 0.2272 - val_loss: 8.0876 - val_categorical_accuracy: 0.1909\n",
      "Epoch 49/50\n",
      "8/8 - 1s - loss: 3.2167 - categorical_accuracy: 0.2298 - val_loss: 8.0839 - val_categorical_accuracy: 0.1909\n",
      "Epoch 50/50\n",
      "8/8 - 1s - loss: 3.1880 - categorical_accuracy: 0.2298 - val_loss: 8.1229 - val_categorical_accuracy: 0.1818\n"
     ]
    }
   ],
   "source": [
    "batch_size=5\n",
    "epochs = 50\n",
    "\n",
    "\n",
    "# Compile & run training\n",
    "model.compile(optimizer='rmsprop', \\\n",
    "              loss='categorical_crossentropy',\\\n",
    "              metrics=['categorical_accuracy'])\n",
    "\n",
    "history = model.fit([data_q, data_a_in],data_a_out_cat, batch_size=batch_size,\\\n",
    "                       verbose =2, epochs=epochs, \\\n",
    "                       validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"functional_3\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input_4 (InputLayer)            [(None, None)]       0                                            \n",
      "__________________________________________________________________________________________________\n",
      "input_3 (InputLayer)            [(None, 10)]         0                                            \n",
      "__________________________________________________________________________________________________\n",
      "embedding_1 (Embedding)         multiple             500000      input_3[0][0]                    \n",
      "                                                                 input_4[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "bidirectional (Bidirectional)   [(None, 10, 200), (N 160800      embedding_1[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "concatenate (Concatenate)       (None, 200)          0           bidirectional[0][1]              \n",
      "                                                                 bidirectional[0][3]              \n",
      "__________________________________________________________________________________________________\n",
      "concatenate_1 (Concatenate)     (None, 200)          0           bidirectional[0][2]              \n",
      "                                                                 bidirectional[0][4]              \n",
      "__________________________________________________________________________________________________\n",
      "lstm_3 (LSTM)                   [(None, None, 200),  240800      embedding_1[1][0]                \n",
      "                                                                 concatenate[0][0]                \n",
      "                                                                 concatenate_1[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "dense_1 (Dense)                 (None, 10, 200)      40000       bidirectional[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "dot (Dot)                       (None, None, 10)     0           lstm_3[0][0]                     \n",
      "                                                                 dense_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "activation (Activation)         (None, None, 10)     0           dot[0][0]                        \n",
      "__________________________________________________________________________________________________\n",
      "activation_1 (Activation)       (None, None, 10)     0           activation[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "dot_1 (Dot)                     (None, None, 200)    0           activation_1[0][0]               \n",
      "                                                                 bidirectional[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "concatenate_2 (Concatenate)     (None, None, 400)    0           dot_1[0][0]                      \n",
      "                                                                 lstm_3[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "dense_2 (Dense)                 (None, None, 5000)   2005000     concatenate_2[0][0]              \n",
      "==================================================================================================\n",
      "Total params: 2,946,600\n",
      "Trainable params: 2,946,600\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.layers import Lambda, Dot, Activation, Concatenate, Dropout, Bidirectional\n",
    "from tensorflow.keras import backend as K\n",
    "\n",
    "max_en_words = 5000\n",
    "max_en_len = 10\n",
    "latent_dim = 100\n",
    "\n",
    "# Define an input sequence and process it.\n",
    "encoder_inputs = Input(shape=(max_en_len,))\n",
    "\n",
    "embed = Embedding(max_en_words, latent_dim, mask_zero = True, input_length=max_en_len)\n",
    "encoder_embed = embed(encoder_inputs)\n",
    "\n",
    "encoder_lstm = Bidirectional(LSTM(latent_dim,return_sequences=True, \\\n",
    "                    dropout = 0.2, recurrent_dropout =0.2,\\\n",
    "                    return_state=True))\n",
    "\n",
    "encoder_outputs, forward_h, forward_c, backward_h, backward_c = encoder_lstm(encoder_embed)\n",
    "\n",
    "state_h = Concatenate()([forward_h, backward_h])\n",
    "state_c = Concatenate()([forward_c, backward_c])\n",
    "\n",
    "encoder_states = [state_h, state_c]\n",
    "\n",
    "# Set up the decoder, using `encoder_states` as initial state.\n",
    "# the shape of decoder_inputs is set to None so it can translate \n",
    "# with a single word input, not necessary a sentence input\n",
    "decoder_inputs = Input(shape=(None,))\n",
    "\n",
    "decoder_embed = embed(decoder_inputs)\n",
    "\n",
    "decoder_lstm = LSTM(200, return_sequences=True, return_state=True, \\\n",
    "                   dropout = 0.2, recurrent_dropout =0.2)\n",
    "\n",
    "decoder_outputs, _, _ = decoder_lstm(decoder_embed, initial_state=encoder_states)\n",
    "\n",
    "\n",
    "# Transform encoder outputs to a space which can be aligned with decoder output\n",
    "encoder_outputs_transformed = Dense(200, \\\n",
    "                                    activation=None, \\\n",
    "                                    use_bias=False)(encoder_outputs)\n",
    "\n",
    "# Calculate alignment between decoder and encoder\n",
    "attention = Dot(axes = [2,2])([decoder_outputs, encoder_outputs_transformed])\n",
    "attention = Activation('tanh')(attention)\n",
    "\n",
    "\n",
    "# Normalize alignment score\n",
    "attention = Activation('softmax')(attention)\n",
    "\n",
    "# Weighted sum\n",
    "context = Dot(axes=[2,1]) ([attention, encoder_outputs])\n",
    "\n",
    "# Concatenate context with decoder output\n",
    "decoder_combined_context = Concatenate(axis = -1)([context, decoder_outputs])\n",
    "\n",
    "decoder_dense = Dense(max_en_words, activation='softmax')\n",
    "decoder_outputs = decoder_dense(decoder_combined_context)\n",
    "\n",
    "# Define the model that will turn\n",
    "# `encoder_input_data` & `decoder_input_data` into `decoder_target_data`\n",
    "model2 = Model([encoder_inputs, decoder_inputs], decoder_outputs)\n",
    "\n",
    "model2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "8/8 - 3s - loss: 7.9323 - categorical_accuracy: 0.1097 - val_loss: 6.8428 - val_categorical_accuracy: 0.0818\n",
      "Epoch 2/50\n",
      "8/8 - 1s - loss: 5.5693 - categorical_accuracy: 0.1097 - val_loss: 6.6699 - val_categorical_accuracy: 0.1091\n",
      "Epoch 3/50\n",
      "8/8 - 1s - loss: 4.7750 - categorical_accuracy: 0.1253 - val_loss: 6.9426 - val_categorical_accuracy: 0.0909\n",
      "Epoch 4/50\n",
      "8/8 - 1s - loss: 4.4669 - categorical_accuracy: 0.1305 - val_loss: 7.1856 - val_categorical_accuracy: 0.0909\n",
      "Epoch 5/50\n",
      "8/8 - 1s - loss: 4.3384 - categorical_accuracy: 0.1149 - val_loss: 7.4015 - val_categorical_accuracy: 0.1091\n",
      "Epoch 6/50\n",
      "8/8 - 1s - loss: 4.2323 - categorical_accuracy: 0.1305 - val_loss: 7.5099 - val_categorical_accuracy: 0.1364\n",
      "Epoch 7/50\n",
      "8/8 - 1s - loss: 4.1445 - categorical_accuracy: 0.1462 - val_loss: 7.7097 - val_categorical_accuracy: 0.1091\n",
      "Epoch 8/50\n",
      "8/8 - 1s - loss: 4.0677 - categorical_accuracy: 0.1593 - val_loss: 7.8102 - val_categorical_accuracy: 0.1273\n",
      "Epoch 9/50\n",
      "8/8 - 1s - loss: 4.0035 - categorical_accuracy: 0.1540 - val_loss: 8.0723 - val_categorical_accuracy: 0.1273\n",
      "Epoch 10/50\n",
      "8/8 - 1s - loss: 3.9254 - categorical_accuracy: 0.1619 - val_loss: 8.0843 - val_categorical_accuracy: 0.1364\n",
      "Epoch 11/50\n",
      "8/8 - 1s - loss: 3.8561 - categorical_accuracy: 0.1671 - val_loss: 8.2760 - val_categorical_accuracy: 0.1455\n",
      "Epoch 12/50\n",
      "8/8 - 1s - loss: 3.7817 - categorical_accuracy: 0.1697 - val_loss: 8.3296 - val_categorical_accuracy: 0.1636\n",
      "Epoch 13/50\n",
      "8/8 - 1s - loss: 3.7167 - categorical_accuracy: 0.1802 - val_loss: 8.4103 - val_categorical_accuracy: 0.1182\n",
      "Epoch 14/50\n",
      "8/8 - 1s - loss: 3.6585 - categorical_accuracy: 0.1802 - val_loss: 8.4733 - val_categorical_accuracy: 0.1364\n",
      "Epoch 15/50\n",
      "8/8 - 1s - loss: 3.5839 - categorical_accuracy: 0.1802 - val_loss: 8.5046 - val_categorical_accuracy: 0.1636\n",
      "Epoch 16/50\n",
      "8/8 - 1s - loss: 3.5309 - categorical_accuracy: 0.1906 - val_loss: 8.5197 - val_categorical_accuracy: 0.2091\n",
      "Epoch 17/50\n",
      "8/8 - 1s - loss: 3.4664 - categorical_accuracy: 0.2167 - val_loss: 8.5736 - val_categorical_accuracy: 0.1636\n",
      "Epoch 18/50\n",
      "8/8 - 1s - loss: 3.4135 - categorical_accuracy: 0.2115 - val_loss: 8.5806 - val_categorical_accuracy: 0.1636\n",
      "Epoch 19/50\n",
      "8/8 - 1s - loss: 3.3487 - categorical_accuracy: 0.2167 - val_loss: 8.6045 - val_categorical_accuracy: 0.2182\n",
      "Epoch 20/50\n",
      "8/8 - 1s - loss: 3.3126 - categorical_accuracy: 0.2298 - val_loss: 8.6103 - val_categorical_accuracy: 0.1909\n",
      "Epoch 21/50\n",
      "8/8 - 1s - loss: 3.2444 - categorical_accuracy: 0.2402 - val_loss: 8.6353 - val_categorical_accuracy: 0.1818\n",
      "Epoch 22/50\n",
      "8/8 - 1s - loss: 3.1913 - categorical_accuracy: 0.2350 - val_loss: 8.6492 - val_categorical_accuracy: 0.1727\n",
      "Epoch 23/50\n",
      "8/8 - 1s - loss: 3.1507 - categorical_accuracy: 0.2507 - val_loss: 8.6635 - val_categorical_accuracy: 0.1727\n",
      "Epoch 24/50\n",
      "8/8 - 1s - loss: 3.0910 - categorical_accuracy: 0.2480 - val_loss: 8.6790 - val_categorical_accuracy: 0.1727\n",
      "Epoch 25/50\n",
      "8/8 - 1s - loss: 3.0448 - categorical_accuracy: 0.2507 - val_loss: 8.7015 - val_categorical_accuracy: 0.2091\n",
      "Epoch 26/50\n",
      "8/8 - 1s - loss: 2.9842 - categorical_accuracy: 0.2585 - val_loss: 8.7265 - val_categorical_accuracy: 0.1818\n",
      "Epoch 27/50\n",
      "8/8 - 1s - loss: 2.9518 - categorical_accuracy: 0.2559 - val_loss: 8.7267 - val_categorical_accuracy: 0.1909\n",
      "Epoch 28/50\n",
      "8/8 - 1s - loss: 2.9016 - categorical_accuracy: 0.2559 - val_loss: 8.7387 - val_categorical_accuracy: 0.1909\n",
      "Epoch 29/50\n",
      "8/8 - 1s - loss: 2.8537 - categorical_accuracy: 0.2611 - val_loss: 8.7630 - val_categorical_accuracy: 0.1818\n",
      "Epoch 30/50\n",
      "8/8 - 1s - loss: 2.8035 - categorical_accuracy: 0.2663 - val_loss: 8.7742 - val_categorical_accuracy: 0.1909\n",
      "Epoch 31/50\n",
      "8/8 - 1s - loss: 2.7515 - categorical_accuracy: 0.2742 - val_loss: 8.7867 - val_categorical_accuracy: 0.1818\n",
      "Epoch 32/50\n",
      "8/8 - 1s - loss: 2.6917 - categorical_accuracy: 0.3003 - val_loss: 8.8075 - val_categorical_accuracy: 0.1818\n",
      "Epoch 33/50\n",
      "8/8 - 1s - loss: 2.6521 - categorical_accuracy: 0.2846 - val_loss: 8.8365 - val_categorical_accuracy: 0.1727\n",
      "Epoch 34/50\n",
      "8/8 - 1s - loss: 2.6060 - categorical_accuracy: 0.2977 - val_loss: 8.8604 - val_categorical_accuracy: 0.2000\n",
      "Epoch 35/50\n",
      "8/8 - 1s - loss: 2.5487 - categorical_accuracy: 0.3238 - val_loss: 8.8756 - val_categorical_accuracy: 0.1818\n",
      "Epoch 36/50\n",
      "8/8 - 1s - loss: 2.4962 - categorical_accuracy: 0.3264 - val_loss: 8.8783 - val_categorical_accuracy: 0.1818\n",
      "Epoch 37/50\n",
      "8/8 - 1s - loss: 2.4481 - categorical_accuracy: 0.3342 - val_loss: 8.9022 - val_categorical_accuracy: 0.1727\n",
      "Epoch 38/50\n",
      "8/8 - 1s - loss: 2.4114 - categorical_accuracy: 0.3446 - val_loss: 8.9204 - val_categorical_accuracy: 0.1909\n",
      "Epoch 39/50\n",
      "8/8 - 1s - loss: 2.3482 - categorical_accuracy: 0.3812 - val_loss: 8.9558 - val_categorical_accuracy: 0.1909\n",
      "Epoch 40/50\n",
      "8/8 - 1s - loss: 2.3051 - categorical_accuracy: 0.3995 - val_loss: 8.9618 - val_categorical_accuracy: 0.1727\n",
      "Epoch 41/50\n",
      "8/8 - 1s - loss: 2.2523 - categorical_accuracy: 0.3838 - val_loss: 8.9931 - val_categorical_accuracy: 0.1727\n",
      "Epoch 42/50\n",
      "8/8 - 1s - loss: 2.2093 - categorical_accuracy: 0.4204 - val_loss: 9.0308 - val_categorical_accuracy: 0.1545\n",
      "Epoch 43/50\n",
      "8/8 - 1s - loss: 2.1642 - categorical_accuracy: 0.4334 - val_loss: 9.0114 - val_categorical_accuracy: 0.1636\n",
      "Epoch 44/50\n",
      "8/8 - 1s - loss: 2.1069 - categorical_accuracy: 0.4413 - val_loss: 9.0502 - val_categorical_accuracy: 0.1727\n",
      "Epoch 45/50\n",
      "8/8 - 1s - loss: 2.0528 - categorical_accuracy: 0.4700 - val_loss: 9.0304 - val_categorical_accuracy: 0.1727\n",
      "Epoch 46/50\n",
      "8/8 - 1s - loss: 2.0186 - categorical_accuracy: 0.4674 - val_loss: 9.0817 - val_categorical_accuracy: 0.1818\n",
      "Epoch 47/50\n",
      "8/8 - 1s - loss: 1.9676 - categorical_accuracy: 0.4700 - val_loss: 9.1087 - val_categorical_accuracy: 0.1909\n",
      "Epoch 48/50\n",
      "8/8 - 1s - loss: 1.9239 - categorical_accuracy: 0.5013 - val_loss: 9.1182 - val_categorical_accuracy: 0.1545\n",
      "Epoch 49/50\n",
      "8/8 - 1s - loss: 1.8816 - categorical_accuracy: 0.5065 - val_loss: 9.1347 - val_categorical_accuracy: 0.1909\n",
      "Epoch 50/50\n",
      "8/8 - 1s - loss: 1.8236 - categorical_accuracy: 0.5352 - val_loss: 9.1431 - val_categorical_accuracy: 0.1909\n"
     ]
    }
   ],
   "source": [
    "# Compile & run training\n",
    "batch_size=5\n",
    "epochs = 50\n",
    "\n",
    "model2.compile(optimizer='rmsprop', \\\n",
    "              loss='categorical_crossentropy',\\\n",
    "              metrics=['categorical_accuracy'])\n",
    "\n",
    "history2 = model2.fit([data_q, data_a_in],data_a_out_cat, batch_size=batch_size,\\\n",
    "                       verbose =2, epochs=epochs, \\\n",
    "                       validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Compare the result\n",
    "def smooth_curve(points, factor=0.8):\n",
    "    smoothed_points = []\n",
    "    for point in points:\n",
    "        if smoothed_points:\n",
    "            previous = smoothed_points[-1]\n",
    "            smoothed_points.append(previous * factor + point * (1 - factor))\n",
    "        else:\n",
    "            smoothed_points.append(point)\n",
    "    return smoothed_points\n",
    "\n",
    "epochs = range(1, len(history.history['val_categorical_accuracy']) + 1)\n",
    "plt.plot(epochs, smooth_curve(history.history['val_categorical_accuracy']), 'r-', label='Basic')\n",
    "plt.plot(epochs, smooth_curve(history2.history['val_categorical_accuracy']), 'b-', label='Attention')\n",
    "plt.title('Validation Accuracy')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
